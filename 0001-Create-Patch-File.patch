From 3d96a4c396ae80fca72e6be6465ceadab0db90d9 Mon Sep 17 00:00:00 2001
From: Sachin3007 <sachinkumaryadav30@gmail.com>
Date: Tue, 27 Sep 2022 02:05:58 +0530
Subject: [PATCH] Create Patch File

---
 datafeed/test.csv |  0
 src/App.tsx       | 21 +++++++++++++++++++--
 src/Graph.tsx     | 10 ++++++++--
 3 files changed, 27 insertions(+), 4 deletions(-)
 create mode 100644 datafeed/test.csv

diff --git a/datafeed/test.csv b/datafeed/test.csv
new file mode 100644
index 0000000..e69de29
diff --git a/src/App.tsx b/src/App.tsx
index 0728518..43daaa4 100755
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,14 @@ import React, { Component } from 'react';
 import DataStreamer, { ServerRespond } from './DataStreamer';
 import Graph from './Graph';
 import './App.css';
+//import { clearInterval } from 'timers';
 
 /**
  * State declaration for <App />
  */
 interface IState {
   data: ServerRespond[],
+  showGraph: boolean,
 }
 
 /**
@@ -22,6 +24,7 @@ class App extends Component<{}, IState> {
       // data saves the server responds.
       // We use this state to parse data down to the child element (Graph) as element property
       data: [],
+      showGraph: false,
     };
   }
 
@@ -29,18 +32,32 @@ class App extends Component<{}, IState> {
    * Render Graph react component with state.data parse as property data
    */
   renderGraph() {
+    if (this.state.showGraph) {
     return (<Graph data={this.state.data}/>)
+    }
   }
 
   /**
    * Get new data from server and update the state with the new data
    */
   getDataFromServer() {
+    let x = 0;
+    const interval = setInterval ( () => {
     DataStreamer.getData((serverResponds: ServerRespond[]) => {
       // Update the state by creating a new array of data that consists of
       // Previous data in the state and the new data from server
-      this.setState({ data: [...this.state.data, ...serverResponds] });
-    });
+      //this.setState({ data: [...this.state.data, ...serverResponds] });
+      this.setState ({
+        data: serverResponds,
+        showGraph: true,
+      } );
+    }); },100)
+    
+    x++;
+
+    if (x > 1000) {
+      clearInterval(interval);
+    }
   }
 
   /**
diff --git a/src/Graph.tsx b/src/Graph.tsx
index ec1430e..04c6c1a 100644
--- a/src/Graph.tsx
+++ b/src/Graph.tsx
@@ -14,7 +14,7 @@ interface IProps {
  * Perspective library adds load to HTMLElement prototype.
  * This interface acts as a wrapper for Typescript compiler.
  */
-interface PerspectiveViewerElement {
+interface PerspectiveViewerElement extends HTMLElement {
   load: (table: Table) => void,
 }
 
@@ -32,7 +32,7 @@ class Graph extends Component<IProps, {}> {
 
   componentDidMount() {
     // Get element to attach the table from the DOM.
-    const elem: PerspectiveViewerElement = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
+    const elem = document.getElementsByTagName('perspective-viewer')[0] as unknown as PerspectiveViewerElement;
 
     const schema = {
       stock: 'string',
@@ -48,7 +48,13 @@ class Graph extends Component<IProps, {}> {
       // Load the `table` in the `<perspective-viewer>` DOM reference.
 
       // Add more Perspective configurations here.
+      
       elem.load(this.table);
+      elem.setAttribute('view','y_line');
+      elem.setAttribute('column-pivots','["stock"]');
+      elem.setAttribute('row-pivots','["timestamp"]');
+      elem.setAttribute('columns','["top_ask_price"]');
+      elem.setAttribute('aggregates','{"stocks": "distance count", "top_ask_price": "avg", "top_bid_price": "avg","timestamp" : "distance count"}');
     }
   }
 
-- 
2.31.1.windows.1

